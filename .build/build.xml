<!--
  ~ Copyright 2010 Vladimir Kirichenko <vladimir.kirichenko@gmail.com>
  ~
  ~  Licensed under the Apache License, Version 2.0 (the "License");
  ~  you may not use this file except in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  See the License for the specific language governing permissions and
  ~  limitations under the License.
  -->

<project name="Project Build" default="release" basedir="../">
	<property file="local.properties"/>
	<property file="build.properties"/>

	<path id="project.class.path">
		<fileset dir="${project.home}/.build/lib" includes="*.jar"/>
		<fileset dir="${project.home}" includes="${build.libraries}"/>
		<fileset dir="${scala.home}/lib" includes="*.jar"/>
	</path>

	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="project.class.path"/>

	<target name="version-git-up" if="vcs.git">
		<exec executable="git" failonerror="true">
			<arg line="pull ${vcs.git.remote} ${vcs.git.branch}"/>
		</exec>
	</target>

	<target name="version-git-ci" if="vcs.git">
		<exec executable="git" failonerror="true">
			<arg line="commit -m build ${project.home}/version"/>
		</exec>
		<exec executable="git" failonerror="true">
			<arg line="push  ${vcs.git.remote} ${vcs.git.branch}"/>
		</exec>
	</target>

	<target name="version-svn-up" if="vcs.svn">
		<delete file="${project.home}/version"/>
		<exec executable="svn" failonerror="true">
			<arg line="up ${project.home}/version"/>
		</exec>
	</target>

	<target name="version-svn-ci" if="vcs.svn">
		<exec executable="svn" failonerror="true">
			<arg line="ci ${project.home}/version -m &quot;version update&quot;"/>
		</exec>
	</target>

	<target name="version-vcs-up" if="developer">
		<antcall target="version-svn-up"/>
		<antcall target="version-git-up"/>
	</target>
	<target name="version-vcs-ci" if="developer">
		<antcall target="version-svn-ci"/>
		<antcall target="version-git-ci"/>
	</target>

	<target name="version">
		<antcall target="version-vcs-up"/>

		<propertyfile file="${project.home}/version">
			<entry key="version.build" type="int" operation="+" default="1"/>
		</propertyfile>

		<property file="${project.home}/version"/>
		<tstamp>
			<format property="build.time" pattern="yyyy-MM-dd_hh-mm-ss"/>
		</tstamp>
		<exec executable="hostname" osfamily="unix"
		      failifexecutionfails="false" outputproperty="env.COMPUTERNAME"/>
		<property name="env.HOSTNAME" value="${env.COMPUTERNAME}"/>

		<property name="version.long"
		          value="${version}.${version.build}${version.suffix} @${env.HOSTNAME} (${build.time})"/>
		<property name="version.safe"
		          value="${version.escaped}_${version.build}_${env.HOSTNAME}_${build.time}"/>
		<property name="version.short" value="${version}.${version.build} ${version.suffix}"/>
		<echo message="version ${version.long}"/>
		<echo message="##teamcity[buildNumber '${version.long}']"/>
		<echo message="##cruisecontrol-version=${version.long}"/>
		<antcall target="version-vcs-ci"/>
	</target>

	<target name="copy-resources" if="build.resources">
		<copy todir="${project.home}/build/common/classes" verbose="true">
			<fileset dir="${project.home}" includes="${build.resources}"/>
			<mapper type="regexp" from="^([^\\]*)\\([^\\]*)\\(.*)$$" to="\3"/>
		</copy>
		<copy todir="${project.home}/build/common/classes" verbose="true">
			<fileset dir="${project.home}" includes="${build.resources}"/>
			<mapper type="regexp" from="^([^/]*)/([^/]*)/(.*)$$" to="\3"/>
		</copy>
	</target>

	<target name="clean">
		<delete dir="${project.home}/dist" excludes="last-build-log.txt" failonerror="false"/>
		<mkdir dir="${project.home}/dist"/>
		<delete dir="${project.home}/build/common/classes" failonerror="false"/>
		<mkdir dir="${project.home}/build/common/classes"/>
	</target>

	<target name="antlr-generate">
		<antlr target="${project.home}/${grammar}">
			<classpath refid="project.class.path"/>
		</antlr>
	</target>

	<target name="antlr" if="build.antlr.grammars">
		<foreach list="${build.antlr.grammars}" param="grammar" target="antlr-generate"/>
	</target>

	<target name="compile-scala" depends="antlr" if="build.use.scala">
		<taskdef resource="scala/tools/ant/antlib.xml" classpathref="project.class.path"/>
		<fsc destdir="${project.home}/build/common/classes" encoding="UTF-8" force="always" fork="true"
		        classpathref="project.class.path" srcdir="${build.sources}"/>

		<antcall target="copy-resources"/>

		<property name="class.path.property" refid="project.class.path"/>
	</target>

	<target name="resolve-local-compiler" if="project.jdk.home">
		<property name="_jdk.home" value="${project.jdk.home}"/>
	</target>

	<target name="resolve-global-compiler" unless="project.jdk.home">
		<property name="_jdk.home" value="${jdk.home}"/>
	</target>

	<target name="compile" depends="antlr, resolve-local-compiler, resolve-global-compiler" if="build.use.java">
		<javac executable="${_jdk.home}/bin/javac" debug="true" fork="yes" destdir="${project.home}/build/common/classes" encoding="UTF-8"
		       classpathref="project.class.path" srcdir="${build.sources}"/>

		<antcall target="copy-resources"/>

		<property name="class.path.property" refid="project.class.path"/>
	</target>

	<target name="unit-tests" depends="clean, compile-scala, compile">
		<delete dir="${project.home}/build/common/junit/unit" failonerror="false"/>
		<mkdir dir="${project.home}/build/common/junit/unit"/>
		<junit printsummary="yes" haltonerror="no" haltonfailure="no" fork="yes" showoutput="yes" jvm="${_jdk.home}/bin/java"
		       failureproperty="test.failed" timeout="900000" dir="${project.home}">
			<classpath>
				<pathelement location="${project.home}/build/common/classes"/>
				<path refid="project.class.path"/>
			</classpath>

			<formatter type="xml"/>

			<jvmarg value="-Xmx256m"/>
			<jvmarg value="-ea"/>

			<batchtest fork="yes" todir="${project.home}/build/common/junit/unit">
				<fileset dir="${project.home}/build/common/classes" excludes="${junit.exclude}" includes="**/*TestCase.class"/>
			</batchtest>
		</junit>
		<fail if="test.failed">Unit tests failed.</fail>
	</target>

	<target name="changelog">
		<copy file="${project.home}/CHANGES.txt" todir="${project.home}/dist/"/>
	</target>

	<target name="vcs-tag-cvs" if="vcs.cvs">
		<cvs command="tag ${vcs.tag.prefix}${version.safe}"/>
	</target>

	<target name="vcs-tag-svn" if="vcs.svn">
		<exec executable="svn" failonerror="true">
			<arg line="copy -m ${vcs.tag.prefix}${version.safe} . ${vcs.svn.path}/tags/${vcs.tag.prefix}${version.safe}"/>
		</exec>
	</target>

	<target name="vcs-tag" if="developer">
		<antcall target="vcs-tag-cvs"/>
		<antcall target="vcs-tag-svn"/>
	</target>

	<target name="build-module">
		<ant antfile="${project.home}/.build/build-${type}.xml">
			<property name="build.properties" value="${name}.${type}"/>
		</ant>
	</target>

	<macrodef name="build">
		<attribute name="list" default=""/>
		<attribute name="type"/>
		<sequential>
			<foreach list="@{list}" param="name" target="build-module" delimiter="," trim="true" inheritAll="true">
				<param name="type" value="@{type}"/>
			</foreach>
		</sequential>
	</macrodef>

	<target name="build" depends="version">
		<build list="${modules}" type="module"/>
		<build list="${javadocs}" type="javadoc"/>
		<build list="${releases}" type="release"/>
		<build list="${war-releases}" type="war-release"/>
	</target>

	<target name="release" depends="clean, build, unit-tests, changelog, vcs-tag"/>
</project>
